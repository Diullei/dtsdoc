/// <reference path="../typings/jquery.d.ts" />
/// <reference path="../Parsect/src/parsect.ts" />
/// <reference path="../Parsect/src/globals.ts" />
/// <reference path="../Parsect/src/type.ts" />
/// <reference path="../Parsect/src/parser.ts" />

interface Window{
	webkitURL:{
		createObjectURL(blob:Blob):string;
	};
	TEMPORARY:number;
	PERSISTENT:number;
	requestFileSystem:any;
	webkitRequestFileSystem:any;
}
interface FileSystem{
	root:any;
}

var fileInput  = <JQuery>$("#input_file"); 
var openButton = <JQuery>$("#button_open"); 
var genButton = <JQuery>$("#gen");
var textarea  = <JQuery>$("#source");
var docs      = <JQuery>$("#docs");

textarea.val("");

var documentContent:JQuery;
var cssText:string;

function generateDocuments(){
	docs.children().remove();
	docs.append("<p>Parsing...</p>");
	
	setTimeout(()=>{
		var sourceCode = textarea.val();
		var result = DTSDoc.program.parse(new Source(sourceCode, 0));
		if(result.success){
			docs.append("<p>Parsing finished</p><p>Document generating...</p>");
			var global:DTSDoc.ASTModule = result.value;
			var members = global.members;
			documentContent = $('<div/>');

			documentContent.append($('<h2>Contents</h2>'));
			documentContent.append($('<ul class="contents"><li><a href="#members">Members</a></li><li><a href="#hierarchy">Class Hierarchy</a></li></ul>'));

			documentContent.append('<a name="members" />');
			documentContent.append('<h2>Members</h2>');		
			documentContent.append(members.map((m)=>m.toHTML()));

			documentContent.append($('<hr/>'));

			documentContent.append('<a name="hierarchy" />');
			documentContent.append('<h2>Class Hierarchy</h2>');
			documentContent.append(global.toHierarchyHTML());

			documentContent.append($('<hr/>'));

			documentContent.append($('<footer>Generated by <a href="https://github.com/kontan/dtsdoc">DTSDoc</a></footer>'));		

			var headerHTML = [
'<html>',
	'<head>',
		'<meta charset="utf-8">',
		'<style type="text/css">',
			'h5{ text-align: center; }',
			cssText,
		'</style>',
		'<link rel="STYLESHEET" href="style.css" type="text/css"></link>',
	'</head>',
	'<body>'
].join('');
			var footerHTML = '</body></html>';

			docs.children().remove();
			docs.append(documentContent);


			//$('#downloadLink').attr('href', "data:text/html," + source);

			var _Blob:any = Blob;
			var blob = new _Blob([documentContent.html()], { "type" : "text/html" });
			var requestFileSystem:any = window.requestFileSystem || window.webkitRequestFileSystem;
			
			var downloadBlob = new _Blob([headerHTML + documentContent.html() + footerHTML], { "type" : "text/html" });

			requestFileSystem(window.TEMPORARY, blob.size, (fileSystem:FileSystem)=>{
				fileSystem.root.getFile("docs.html", {create: true}, (fileEntry)=>{
					fileEntry.createWriter((fileWriter)=>{
	                    fileWriter.onwriteend = (e)=>{
	                    	$('#downloadLink').attr('href', fileEntry.toURL());
	                    };
	                    fileWriter.onerror = (e)=>{
	                    	throw e;
	                    };
	                    fileWriter.write(downloadBlob);
	                });
	            }, (error)=>{
	                throw error;
	            });
			}, (err:DOMError)=>{
				throw err;
			});
			


			//var _Blob:any = Blob;
			//var url = window.webkitURL.createObjectURL(new _Blob([documentContent.html()], { "type" : "text/plain" }));
			//$('#downloadLink').attr('href', url);
		}else{
			var pos = result.source.getPosition();
			docs.append("<p>Parsing failed at line " + pos.line + ", column " + pos.column + ": \"" + result.source.source.slice(result.source.position, result.source.position + 128) +  "\"</p>");
		}
	}, 1);
}

genButton.click(()=>{
	generateDocuments();
});

fileInput.change(()=>{
	var input:HTMLInputElement = <HTMLInputElement>fileInput[0];
	var files = input.files;
	var reader:FileReader = new FileReader();
	reader.addEventListener('load', (e)=>{
		textarea.val(reader.result);
		generateDocuments();
	});
	reader.readAsText(files[0]);
});

openButton.click(()=>{
	fileInput.trigger('click');
});


$.ajax("style.css", {
	contentType: "text/plain",
	dataType: "text",
	success: (data)=>{
		cssText = data;
	}
});

function loadSourceFile(url:string):void{
	$.ajax(url, {
		contentType: "text/plain",
		dataType: "text",
		success: (data)=>{
			textarea.val(data);
			generateDocuments();
		}
	});	
}

//loadSourceFile("../../three.d.ts/three.d.ts");

function generateHierarchy(global:DTSDoc.ASTModule):JQuery{
	var section = $('<section/>');

	return section;
}